AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  ENV:
    Type: String
    Description: The current environment staging name
    Default: env
Globals:
  Function:
    Environment:
      Variables:
          # "PGUSER": !Sub '{{resolve:secretsmanager:${secretDBAppInfo}::username}}'
          # "PGHOST": !Sub '{{resolve:secretsmanager:${secretDBEndpoint}::address}}'
          # "PGPASSWORD": !Sub '{{resolve:secretsmanager:${secretDBAppInfo}::password}}'
          # "PGDATABASE": !Sub '{{resolve:secretsmanager:${secretDBAppInfo}::database}}'
          # "PGPORT": !Sub '{{resolve:secretsmanager:${secretDBEndpoint}::port}}'
          "PGUSER": "db_user"
          "PGHOST": 
            Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:DBProxy:Endpoint"
          "PGPORT": "5432"
          "PGDATABASE": "postgres"
          "REGION": !Sub "${AWS::Region}"
    VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:pubGroupId"
        SubnetIds:
          - Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:subnet1"
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: XrayPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                  - 'xray:GetSamplingStatisticSummaries'
                Resource: '*'
        - PolicyName: ProxyAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds-db:connect'
                Resource: 
                  Fn::Sub:
                    - "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${db}/db_user"
                    - db:
                        Fn::ImportValue:
                          !Sub "gratitude:${AWS::Region}:${ENV}:DBProxy"

    # BEGIN: Functions
  cognitoInsertTrigger:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.UserCreationTrigger
      Description: A lambda to use a trigger for Cognito sign up
      FunctionName: createUserCognitoTrigger
      MemorySize: 128
      Timeout: 5
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Tags:
        compliment: cognito trigger
  getCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to get category subscriptions for a user
      FunctionName: getCategoryFunction
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.getCategoryFunction
      MemorySize: 128
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Timeout: 5
      Tags:
        compliment: get categories function
  removeCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to remove a category subscription for a user
      FunctionName: removeCategory
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.removeCategoryFunction
      MemorySize: 128
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Timeout: 5
      Tags:
        compliment: remove category function
  addCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda that will add a category subscription for a user
      FunctionName: addCategoryFunction
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.subscribeCategoryFunction
      MemorySize: 128
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Timeout: 5
      Tags:
        compliment: addCategoryFunction
  getRandomUserComplimentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to get a compliment, given a username
      FunctionName: getRandomUserComplimentFunction 
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.getUserComplimentFunction
      MemorySize: 128
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Timeout: 5
      Tags:
        compliment: get compliment function
  getRandomComplimentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to get a random compliment from the db given the correct params
      FunctionName: getRandomComplimentFunction
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.getComplimentFunction
      MemorySize: 128
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Timeout: 5
      Tags:
        compliment: get random compliment by category and personality type function
  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda function to get a user's information
      FunctionName: getUserFunction
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.getUserFunction
      MemorySize: 128
      Tracing: Active
      Role: !GetAtt LambdaRole.Arn
      Timeout: 5
      Tags:
        compliment: get user by username function
  personalityExtractorControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda for extracting the personality type and category from the request body
      FunctionName: personalityExtractorControllerFunction
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.personalityController
      MemorySize: 128
      Tracing: Active
      Timeout: 5
      Tags:
        compliment: controller-personality
  userCategoryExtractorControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda for extracting the user and category from the request
      FunctionName: userCategoryExtractorControllerFunction
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.userCategoryController
      MemorySize: 128
      Tracing: Active
      Timeout: 5
      Tags:
        compliment: controller-user-category
  usernameExtractorControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda for extracting the username from the request path
      FunctionName: usernameExtractorControllerFunction
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/gratitude-functions:${ENV}"
      ImageConfig:
        Command: 
          - index.handlers.usernameController
      MemorySize: 128
      Tracing: Active
      Timeout: 5
      Tags:
        compliment: controller-username
  # END: Functions
Outputs:
  cognitoInsertTriggerArn:
    Value: !GetAtt cognitoInsertTrigger.Arn
    Description: The ARN of the cognitoInsertTrigger function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:cognitoInsertTrigger:Arn"
  getCategoryFunctionArn:
    Value: !GetAtt getCategoryFunction.Arn
    Description: The ARN of the getCategoryFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:getCategoryFunction:Arn"
  removeCategoryFunctionArn:
    Value: !GetAtt removeCategoryFunction.Arn
    Description: The ARN of the removeCategoryFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:removeCategoryFunction:Arn"
  addCategoryFunctionArn:
    Value: !GetAtt addCategoryFunction.Arn
    Description: The ARN of the addCategoryFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:addCategoryFunction:Arn"
  getRandomUserComplimentFunctionArn:
    Value: !GetAtt getRandomUserComplimentFunction.Arn
    Description: The ARN of the getRandomUserComplimentFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:getRandomUserComplimentFunction:Arn"
  getRandomComplimentFunctionArn:
    Value: !GetAtt getRandomComplimentFunction.Arn
    Description: The ARN of the getRandomComplimentFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:getRandomComplimentFunction:Arn"
  getUserFunctionArn:
    Value: !GetAtt getUserFunction.Arn
    Description: The ARN of the getUserFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:getUserFunction:Arn"
  personalityExtractorControllerFunctionArn:
    Value: !GetAtt personalityExtractorControllerFunction.Arn
    Description: The ARN of the personalityExtractorControllerFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:personalityExtractorControllerFunction:Arn"
  userCategoryExtractorControllerFunctionArn:
    Value: !GetAtt userCategoryExtractorControllerFunction.Arn
    Description: The ARN of the userCategoryExtractorControllerFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:userCategoryExtractorControllerFunction:Arn"
  usernameExtractorControllerFunctionArn:
    Value: !GetAtt usernameExtractorControllerFunction.Arn
    Description: The ARN of the usernameExtractorControllerFunction function
    Export:
      Name: !Sub "gratitude:${AWS::Region}:${ENV}:usernameExtractorControllerFunction:Arn"