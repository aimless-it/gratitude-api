AWSTemplateFormatVersion: 2010-09-09
Description: Complete Backend for Compliment API
Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs14.x
    Environment:
      Variables:
          # "PGUSER": !Sub '{{resolve:secretsmanager:${secretDBAppInfo}::username}}'
          # "PGHOST": !Sub '{{resolve:secretsmanager:${secretDBEndpoint}::address}}'
          # "PGPASSWORD": !Sub '{{resolve:secretsmanager:${secretDBAppInfo}::password}}'
          # "PGDATABASE": !Sub '{{resolve:secretsmanager:${secretDBAppInfo}::database}}'
          # "PGPORT": !Sub '{{resolve:secretsmanager:${secretDBEndpoint}::port}}'
          "PGUSER": "app_user"
          "PGHOST": !GetAtt complimentRDS.Endpoint.Address
          "PGPORT": !GetAtt complimentRDS.Endpoint.Address
          "PGPASSWORD": "password"
          "PGDATABASE": "compliments"
    VpcConfig:
        SecurityGroupIds:
          - !Ref publicGroup
        SubnetIds:
          - !Ref sub1
# Metadata:

Parameters:
  DBUsername:
    Default: db_user
    Description: master username for the RDS
    Type: String
    NoEcho: true
  DBPassword:
    Default: password
    Description: master password for the RDS
    Type: String
    NoEcho: true
  DBPort:
    Default: 5432
    Description: port used for RDS instance
    Type: Number
    ConstraintDescription: "[0-9]+"
    MinValue: 1
    MaxValue: 55000
    NoEcho: true

Mappings:
  AvailabilityZones:
    us-east-1:
      a: us-east-1a
      b: us-east-1b
      c: us-east-1c
Resources:
  # BEGIN: Networking
  complimentGateway:
    Type: AWS::EC2::InternetGateway
  gatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref complimentVpc
      InternetGatewayId: !Ref complimentGateway
  complimentRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref complimentVpc
  # RouteTableGatewayAssociation:
  #   Type: AWS::EC2::GatewayRouteTableAssociation
  #   Properties:
  #     GatewayId: !Ref complimentGateway
  #     RouteTableId: !Ref complimentRouteTable
  internetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref complimentRouteTable
      GatewayId: !Ref complimentGateway
  complimentVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: compliment
          Value: vpc
  sub1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ AvailabilityZones, us-east-1, a ]
      VpcId: !Ref complimentVpc
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: compliment
          Value: subnet-1
  sub2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ AvailabilityZones, us-east-1, b ]
      VpcId: !Ref complimentVpc
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: compliment
          Value: subnet-2
  sub3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [ AvailabilityZones, us-east-1, c ]
      VpcId: !Ref complimentVpc
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: compliment
          Value: subnet-3
  sub1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub1
      RouteTableId: !Ref complimentRouteTable
  sub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub2
      RouteTableId: !Ref complimentRouteTable
  sub3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref sub3
      RouteTableId: !Ref complimentRouteTable
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: A group of subnets for the rds to reside in
      DBSubnetGroupName: Sub-RDS
      SubnetIds:
        - !Ref sub1
        - !Ref sub2
        - !Ref sub3
  # END: Networking
  # BEGIN: Security
  publicGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: compliment-public
      GroupDescription: public SG for compliment components
      VpcId: !Ref complimentVpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 55000
          IpProtocol: tcp
      Tags:
        - Key: compliment
          Value: public-sg
  bastionGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: compliment-bastion
      GroupDescription: public SG for ssh into bastion host
      VpcId: !Ref complimentVpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 55000
          IpProtocol: tcp
      Tags:
        - Key: compliment
          Value: Bastion-SG
  privGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: compliment-private
      GroupDescription: private subnet for compliment services
      VpcId: !Ref complimentVpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref publicGroup
          FromPort: 0
          ToPort: 55000
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 55000
          IpProtocol: tcp
      Tags:
        - Key: compliment
          Value: private-sg
  dbGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: compliment-rdsSG
      GroupDescription: Security Group for rds instance
      VpcId: !Ref complimentVpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref publicGroup
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
        - SourceSecurityGroupId: !Ref bastionGroup
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 55000
          CidrIp: 0.0.0.0/0
  secretDBMasterCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Store RDS username information into secrets manager
      SecretString: !Sub 
        - '{"username": "${username}", "password": "${password}"}'
        - { username: !Ref DBUsername, password: !Ref DBPassword}
      Name: secretDBMasterUsername
      Tags:
        - Key: compliment
          Value: secretDBMasterCredentials
  secretDBEndpoint:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Store RDS Endpoint information into secretes manager
      SecretString: !Sub 
        - '{"address": "${address}", "port":"${port}", "database":"${database}"}'
        - {address: generate, port: 5432, database: postgres}
      Name: secret-rds-endpoint
      Tags:
        - Key: compliment
          Value: secret-rds-endpoint
  secretDBAppInfo:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: database info to use for queries
      SecretString: !Sub 
        - '{"username":"${username}","password":"${password}", "schema":"${schema}"}'
        - {username: app_user, password: password, schema: compliments}
      Name: secretDBSchema
      Tags:
        - Key: compliment
          Value: secretDBConnectionInformation
  workflowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'lamdba:InvokeFunction'
                Resource:
                  - !GetAtt getUserFunction.Arn
                  - !GetAtt removeCategoryFunction.Arn
                  - !GetAtt addCategoryFunction.Arn
                  - !GetAtt getRandomUserComplimentFunction.Arn
                  - !GetAtt getRandomComplimentFunction.Arn
                  - !GetAtt getCategoryFunction.Arn
                  - !GetAtt personalityExtractorControllerFunction.Arn
                  - !GetAtt usernameExtractorControllerFunction.Arn
                  - !GetAtt userCategoryExtractorControllerFunction.Arn
  # END: Security
  # BEGIN: Persistence
  complimentRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: db.t2.micro
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !GetAtt sub2.AvailabilityZone
      BackupRetentionPeriod: 7
      DBInstanceIdentifier: complimentRDS
      DBName: postgres
      DBParameterGroupName: default.postgres12
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: postgres
      EngineVersion: "12.5"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: false
      Port: !Ref DBPort
      PubliclyAccessible: true
      StorageEncrypted: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref dbGroup
      Tags:
        - Key: compliment
          Value: database
  complimentSauron:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 4
        WriteCapacityUnits: 4
      TableName: sauron
      Tags:
        - Key: compliment
          Value: user-tracking-db
  # END: Persistence
  # BEGIN: Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # AccountRecoverySetting:
      #   RecoveryMechanisms:
      #     - Name: verified_email
      #       Priority: 2
      #     - Name: verified_phone_number
      #       Priority: 1
      # AutoVerifiedAttributes:
      #   - email
      #   - phone_number
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: gender
          AttributeDataType: String
          Mutable: true
          DeveloperOnlyAttribute: false
          Required: false
        - Name: race
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: birthdate
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false 
        - Name: locale
          AttributeDataType: String
          Required: false
          Mutable: true     
      LambdaConfig:
        PostConfirmation: !GetAtt cognitoInsertTrigger.Arn
      # Add SMS Verification
      # SmsConfiguration:
        

  # END: Authentication
  # BEGIN: Functions
  layer1:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layer/.
      CompatibleRuntimes:
        - nodejs14.x
      LayerName: init-layer
      Description: Initial layer for lamdba functions in backend
  cognitoInsertTrigger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to use a trigger for Cognito sign up
      FunctionName: createUserCognitoTrigger
      CodeUri: src/handlers/db/triggers/create-user-cognito-trigger.js
      Handler: create-user-cognito-trigger.handler
      MemorySize: 128
      Timeout: 5
      Tags:
        compliment: cognito trigger
  getCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to get category subscriptions for a user
      FunctionName: getCategoryFunction
      CodeUri: src/handlers/db/category/get-categories-for-user.js
      Handler: get-categories-for-user.handler
      MemorySize: 128
      Timeout: 5
      Layers:
        - !Ref layer1
      Tags:
        compliment: get categories function
  removeCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to remove a category subscription for a user
      FunctionName: removeCategory
      CodeUri: src/handlers/db/category/remove-category-from-user-prefs.js
      Handler: remove-category-from-user-prefs.handler
      MemorySize: 128
      Timeout: 5
      Layers:
        - !Ref layer1
      Tags:
        compliment: remove category function
  addCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda that will add a category subscription for a user
      FunctionName: addCategoryFunction
      CodeUri: src/handlers/db/category/subscribe-user-to-category.js
      Handler: subscribe-user-to-category.handler
      MemorySize: 128
      Timeout: 5
      Layers:
        - !Ref layer1
      Tags:
        compliment: addCategoryFunction
  getRandomUserComplimentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to get a compliment, given a username
      FunctionName: getRandomUserComplimentFunction 
      CodeUri: src/handlers/db/compliments/get-compliment.js
      Handler: get-compliment.handler
      MemorySize: 128
      Timeout: 5
      Layers:
        - !Ref layer1
      Tags:
        compliment: get compliment function
  getRandomComplimentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda to get a random compliment from the db given the correct params
      FunctionName: getRandomComplimentFunction
      CodeUri: src/handlers/db/compliments/get-compliment-by-category-personality.js
      Handler: get-compliment-by-category-personality.handler
      MemorySize: 128
      Timeout: 5
      Layers:
        - !Ref layer1
      Tags:
        compliment: get random compliment by category and personality type function
  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda function to get a user's information
      FunctionName: getUserFunction
      CodeUri: src/handlers/db/user/get-user-by-username.js
      Handler: get-user-by-username.handler
      MemorySize: 128
      Timeout: 5
      Layers:
        - !Ref layer1
      Tags:
        compliment: get user by username function
  personalityExtractorControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda for extracting the personality type and category from the request body
      FunctionName: personalityExtractorControllerFunction
      CodeUri: src/handlers/controller/personality-extractor-controller.js
      Handler: personality-extractor-controller.handler
      MemorySize: 128
      Timeout: 5
      Tags:
        compliment: controller-personality
  userCategoryExtractorControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda for extracting the user and category from the request
      FunctionName: userCategoryExtractorControllerFunction
      CodeUri: src/handlers/controller/user-category-extractor-controller.js
      Handler: user-category-extractor-controller.handler
      MemorySize: 128
      Timeout: 5
      Tags:
        compliment: controller-user-category
  usernameExtractorControllerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda for extracting the username from the request path
      FunctionName: usernameExtractorControllerFunction
      CodeUri: src/handlers/controller/username-extractor-controller.js
      Handler: username-extractor-controller.handler
      MemorySize: 128
      Timeout: 5
      Tags:
        compliment: controller-username
  # END: Functions
  # BEGIN: Integration
  # apiGW:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     DefinitionUri: api.yml
  #     Description: Api Gateway for gratitude api
  #     OpenApiVersion: 3.0.3
  #     StageName: dev
  getUserWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Events:
        getUserInfoEvent:
          Type: Api
          Properties:
            Path: /user/{username}
            Method: get
            # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource: !GetAtt userCategoryExtractorControllerFunction.Arn
            Next: service
          service:
            Type: Task
            Resource: !GetAtt getUserFunction.Arn
            End: true
        StartAt: controller
      Tracing: 
        Enabled: true
      Role: !GetAtt workflowRole.Arn
  getComplimentByCategoryWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Events:
        getComplimentEvent:
          Type: Api
          Properties:
            Path: /compliment/{category}
            Method: get
            # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource: !GetAtt personalityExtractorControllerFunction.Arn
            Next: service
          service:
            Type: Task
            Resource: !GetAtt getRandomComplimentFunction.Arn
            End: true
        StartAt: controller
      Tracing: 
        Enabled: true
      Role: !GetAtt workflowRole.Arn
  getComplimentByUsernameWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Events:
        getComplimentEvent:
          Type: Api
          Properties:
            Path: /compliment/user/{username}
            Method: get
            # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource: !GetAtt usernameExtractorControllerFunction.Arn
            Next: service
          service:
            Type: Task
            Resource: !GetAtt getRandomUserComplimentFunction.Arn
            End: true
        StartAt: controller
      Tracing: 
        Enabled: true
      Role: !GetAtt workflowRole.Arn
  getCategoriesForUserWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Events:
        getCategoriesEvent:
          Type: Api
          Properties:
            Path: /category/user/{username}
            Method: get
            # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource: !GetAtt usernameExtractorControllerFunction.Arn
            Next: service
          service:
            Type: Task
            Resource: !GetAtt getCategoryFunction.Arn
            End: true
        StartAt: controller
      Tracing: 
        Enabled: true
      Role: !GetAtt workflowRole.Arn
  postUserCategoryWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Events:
        postUserCategoryEvent:
          Type: Api
          Properties:
            Path: /user/{username}/category/{category}
            Method: post
            # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource: !GetAtt userCategoryExtractorControllerFunction.Arn
            Next: service
          service:
            Type: Task
            Resource: !GetAtt addCategoryFunction.Arn
            End: true
        StartAt: controller
      Tracing: 
        Enabled: true
      Role: !GetAtt workflowRole.Arn
  deleteUserCategoryWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Events:
        deleteUserCategoryEvent:
          Type: Api
          Properties:
            Path: /user/{username}/category/{category}
            Method: delete
            # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource: !GetAtt userCategoryExtractorControllerFunction.Arn
            Next: service
          service:
            Type: Task
            Resource: !GetAtt removeCategoryFunction.Arn
            End: true
        StartAt: controller
      Tracing: 
        Enabled: true
      Role: !GetAtt workflowRole.Arn
  bastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ab4d1e9cf9a1215a
      InstanceType: t2.micro
      KeyName: bastion
      NetworkInterfaces:
        - DeviceIndex: "0"
          DeleteOnTermination: true
          AssociatePublicIpAddress: true
          GroupSet: 
            - !Ref bastionGroup
          SubnetId: !Ref sub1
      UserData: !Base64 |
        #!/bin/bash
        sudo yum update -y
        sudo yum install postgresql
      
Outputs:
  RDSEndpoint:
    Description: endpoint to connect to rds from lamdba, for debugging purposes
    Value: !GetAtt complimentRDS.Endpoint.Address
  bastionIp:
    Description: The ip address of the ec2 instance
    Value: !GetAtt bastion.PublicIp