AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
Parameters:
  ENV:
    Type: String
    Description: The environment staging name
    Default: dev
Mappings:
  LoggingLevels:
    levels:
      dev: ALL
      testing: ALL
      prod: ERROR
Resources:
  # BEGIN: Integration
  apiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: apiGW-Integration
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: states:StartSyncExecution
                Resource:
                  - '*'
  apiGW:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      Description: Api Gateway for gratitude api
      OpenApiVersion: 3.0.3
      StageName: !Ref ENV
      DefinitionBody:
        Fn::Transform:
          Name: 'AWS::Include'
          Parameters:
            Location: api.yml
  getUserWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Events:
      #   getUserInfoEvent:
      #     Type: Api
      #     Properties:
      #       Path: /user/{username}?sensing&judging&introversion&feeling
      #       Method: get
      #       # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:usernameExtractorControllerFunction:Arn"
            Next: errorHandler
          service:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:getUserFunction:Arn"
            End: true
          errorHandler:
            Type: Choice
            Choices:
              - And:
                - Variable: $.result.fail
                  IsPresent: true
                - Variable: $.result.fail
                  BooleanEquals: true
                Next: errState
            Default: service
          errState:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:errorHandlerFunction:Arn"
            End: true
        StartAt: controller
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn:
                Fn::ImportValue:
                  !Sub "gratitude:${AWS::Region}:${ENV}:getUserWorkflowLogs:Arn"
        IncludeExecutionData: true
        Level: !FindInMap [ LoggingLevels, levels, Ref: ENV ]
      Type: EXPRESS
      Role:
        Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:workflowRole:Arn"
  getComplimentByCategoryWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Events:
      #   getComplimentEvent:
      #     Type: Api
      #     Properties:
      #       Path: /compliment/{category}
      #       Method: get
      #       # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:personalityExtractorControllerFunction:Arn"
            Next: errorHandler
          service:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:getRandomComplimentFunction:Arn"
            End: true
          errorHandler:
            Type: Choice
            Choices:
              - And:
                - Variable: $.result.fail
                  IsPresent: true
                - Variable: $.result.fail
                  BooleanEquals: true
                Next: errState
            Default: service
          errState:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:errorHandlerFunction:Arn"
            End: true
        StartAt: controller
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn:
                Fn::ImportValue:
                  !Sub "gratitude:${AWS::Region}:${ENV}:getComplimentByCategoryWorkflowLogs:Arn"
        IncludeExecutionData: true
        Level: !FindInMap [ LoggingLevels, levels, Ref: ENV ]
      Type: EXPRESS
      Role:
        Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:workflowRole:Arn"
  getComplimentByUsernameWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Events:
      #   getComplimentEvent:
      #     Type: Api
      #     Properties:
      #       Path: /compliment/user/{username}
      #       Method: get
      #       # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:usernameExtractorControllerFunction:Arn"
            Next: errorHandler
          service:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:getRandomUserComplimentFunction:Arn"
            End: true
          errorHandler:
            Type: Choice
            Choices:
              - And:
                - Variable: $.result.fail
                  IsPresent: true
                - Variable: $.result.fail
                  BooleanEquals: true
                Next: errState
            Default: service
          errState:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:errorHandlerFunction:Arn"
            End: true
        StartAt: controller
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn:
                Fn::ImportValue:
                  !Sub "gratitude:${AWS::Region}:${ENV}:getComplimentByUsernameWorkflowLogs:Arn"
        IncludeExecutionData: true
        Level: !FindInMap [ LoggingLevels, levels, Ref: ENV ]
      Type: EXPRESS
      Role:
        Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:workflowRole:Arn"
  getCategoriesForUserWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Events:
      #   getCategoriesEvent:
      #     Type: Api
      #     Properties:
      #       Path: /category/user/{username}
      #       Method: get
      #       # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:usernameExtractorControllerFunction:Arn"
            Next: errorHandler
          service:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:getCategoryFunction:Arn"
            End: true
          errorHandler:
            Type: Choice
            Choices:
              - And:
                - Variable: $.result.fail
                  IsPresent: true
                - Variable: $.result.fail
                  BooleanEquals: true
                Next: errState
            Default: service
          errState:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:errorHandlerFunction:Arn"
            End: true
        StartAt: controller
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn:
                Fn::ImportValue:
                  !Sub "gratitude:${AWS::Region}:${ENV}:getCategoriesForUserWorkflowLogs:Arn"
        IncludeExecutionData: true
        Level: !FindInMap [ LoggingLevels, levels, Ref: ENV ]
      Type: EXPRESS
      Role:
        Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:workflowRole:Arn"
  postUserCategoryWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Events:
      #   postUserCategoryEvent:
      #     Type: Api
      #     Properties:
      #       Path: /user/{username}/category/{category}
      #       Method: post
      #       # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:userCategoryExtractorControllerFunction:Arn"
            Next: errorHandler
          service:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:addCategoryFunction:Arn"
            End: true
          errorHandler:
            Type: Choice
            Choices:
              - And:
                - Variable: $.result.fail
                  IsPresent: true
                - Variable: $.result.fail
                  BooleanEquals: true
                Next: errState
            Default: service
          errState:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:errorHandlerFunction:Arn"
            End: true
        StartAt: controller
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn:
                Fn::ImportValue:
                  !Sub "gratitude:${AWS::Region}:${ENV}:postUserCategoryWorkflowLogs:Arn"
        IncludeExecutionData: true
        Level: !FindInMap [ LoggingLevels, levels, Ref: ENV ]
      Type: EXPRESS
      Role:
        Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:workflowRole:Arn"
  deleteUserCategoryWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Events:
      #   deleteUserCategoryEvent:
      #     Type: Api
      #     Properties:
      #       Path: /user/{username}/category/{category}
      #       Method: delete
      #       # RestApiId: !Ref apiGW
      Definition:
        States:
          controller:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:userCategoryExtractorControllerFunction:Arn"
            Next: errorHandler
          service:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:removeCategoryFunction:Arn"
            End: true
          errorHandler:
            Type: Choice
            Choices:
              - And:
                - Variable: $.result.fail
                  IsPresent: true
                - Variable: $.result.fail
                  BooleanEquals: true
                Next: errState
            Default: service
          errState:
            Type: Task
            Resource:
              Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:errorHandlerFunction:Arn"
            End: true
        StartAt: controller
      Tracing:
        Enabled: true
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn:
                Fn::ImportValue:
                  !Sub "gratitude:${AWS::Region}:${ENV}:deleteUserCategoryWorkflowLogs:Arn"
        IncludeExecutionData: true
        Level: !FindInMap [ LoggingLevels, levels, Ref: ENV ]
      Type: EXPRESS
      Role:
        Fn::ImportValue: !Sub "gratitude:${AWS::Region}:${ENV}:workflowRole:Arn"
Outputs:
  restApiUrl:
    Description: The url of the rest api
    Value: !Sub "https://${apiGW}.execute-api.${AWS::Region}.amazonaws.com/${ENV}/"